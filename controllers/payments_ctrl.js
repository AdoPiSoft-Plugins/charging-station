const payments_manager=require("../services/payments_manager.js"),sessions_manager=require("../services/sessions_manager.js"),{dbi,machine_id}=require("plugin-core"),PaymentQue=require("../services/payment_que.js"),Config=require("../config.js");exports.quePayment=async(req,res,next)=>{try{var{charging_port_id,coinslot_id,wait_payment_seconds,max_payment_retries}=req.body,{device}=req;await payments_manager.que({coinslot_id:coinslot_id,device:device,charging_port_id:charging_port_id,wait_payment_seconds:wait_payment_seconds,max_payment_retries:max_payment_retries}),res.json({type:"charging",total_amount:0,credits:0})}catch(e){next(e)}},exports.walletPayment=async(req,res,next)=>{try{let{amount,charging_port_id}=req.body,{customer,device}=req;if(customer=await dbi.models.Customer.findByPk(customer.id),amount>customer.credits)return next("Insufficient wallet");await customer.update({credits:customer.credits-amount});const q=new PaymentQue(null,device,charging_port_id),{rates,ports}=await Config.read();q.rates=rates.sort((a,b)=>b.amount-a.amount),q.total_amount=amount;var credits=q.computeTimeForPayment(),exp=q.computeExpForPayment();let session=await dbi.models.ChargingSession.create({machine_id:machine_id,mobile_device_id:device.db_instance.id,charging_port_id:charging_port_id,time_seconds:credits,expire_minutes:exp});await sessions_manager.startSession(session.id).catch(e=>{});var port=ports.find(p=>p.id===charging_port_id);res.json({...session.get({plain:!0}),charging_port:port})}catch(e){next(e)}};