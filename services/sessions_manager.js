const{dbi}=require("plugin-core"),Session=require("./session.js"),Config=require("../config.js"),{Sequelize}=dbi;exports.list=[],exports.init=async()=>{for(var{Op}=Sequelize,sessions=await dbi.models.ChargingSession.findAll({where:{time_seconds:{[Op.gt]:Sequelize.col("running_time_seconds")},expiration_date:{[Op.or]:[{[Op.gt]:new Date},{[Op.is]:null}]}}}),i=0;i<sessions.length;i++){var s=sessions[i];try{await exports.startSession(s.id)}catch(e){}}},exports.deviceAvailableSessions=async device_id=>exports.list.filter(s=>s.mobile_device_id==device_id&&!["expired","stopped"].includes(s.status)&&null===s.charging_port_id&&!s.isExpired()),exports.sessionsByPort=async port_id=>exports.list.filter(s=>s.charging_port_id==port_id&&!["expired","stopped"].includes(s.status)&&!s.isExpired()),exports.startSession=async session_id=>{let session=await exports.findSession(session_id),{charging_port_id}=session;session.on("error",async e=>{}),session.on("stop",async()=>{try{var[s]=await exports.sessionsByPort(charging_port_id);s&&s.mobile_device_id==session.mobile_device_id&&await exports.startSession(s.id)}catch(e){}try{await exports.stopSession(session_id)}catch(e){}});try{await exports.isSessionLoaded(session_id)}catch(e){exports.list.push(session)}var exist=exports.list.find(s=>"running"===s.status&&s.charging_port_id==charging_port_id);if(exist)return session.mobile_device_id!==exist.mobile_device_id&&await session.clearPort(),Promise.reject("Charging port has existing running session");let{ports}=await Config.read();return ports.find(p=>String(p.id)===String(charging_port_id))?(await session.start(),session):Promise.reject("Charging port not set")},exports.stopSession=async session_id=>{const session=await exports.isSessionLoaded(session_id);return new Promise(resolve=>{session.on("terminated",()=>{session.removeAllListeners(),resolve(session)}),session.stop().catch(e=>{session.removeAllListeners(),resolve(session)})})},exports.isSessionLoaded=async session_id=>{var session=exports.list.find(s=>s.db_instance.id==session_id);if(session)return session;throw new Error("Session not loaded")},exports.findSession=async session_id=>{try{return await exports.isSessionLoaded(session_id)}catch(e){return exports.loadSession(session_id)}},exports.loadSession=async session_id=>{const session=new Session(session_id);return await session.load(),session};