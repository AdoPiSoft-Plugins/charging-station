const EventEmitter=require("events"),{dbi}=require("plugin-core"),moment=require("moment"),NanoTimer=require("nanotimer"),SAVE_INTERVAL=60,Config=require("../config.js"),path=require("path"),cmd=require("../lib/cmd.js");class Session extends EventEmitter{constructor(session_id){super(),this._tick_count=0,this.id=session_id,this.status=null,this.charging_port=null,this.charging_port_id=null,this.mobile_device_id=null}async load(){var s=await dbi.models.ChargingSession.findByPk(this.id);let charging_port_id=this.charging_port_id||s.charging_port_id,{ports}=await Config.read();return this.mobile_device_id=s.mobile_device_id,this.db_instance=s,this.db_instance.charging_port_id=charging_port_id,this.status=this.isExpired()?"expired":"available",this.charging_port_id=charging_port_id,this.charging_port=ports.find(p=>String(p.id)===String(charging_port_id)),s}async prestart(){if("running"===this.status)return Promise.reject("Session is already running");if(this.isExpired())return Promise.reject("Session is already expired");await this.load();var{time_seconds:expiration_date,expire_minutes,running_time_seconds}=this.db_instance;if(expiration_date<=running_time_seconds)return Promise.reject("Session is already consumed");"number"==typeof expire_minutes&&(expiration_date=expiration_date,expiration_date=moment().add(expire_minutes,"minutes").add(expiration_date,"seconds").toDate(),await this.db_instance.update({expiration_date:expiration_date,expire_minutes:null}),Object.assign(this.db_instance,{expiration_date:expiration_date,expire_minutes:null}))}async start(port_id){return port_id&&(this.charging_port_id=port_id),await this.prestart(),this.startTick(),this.turnOnGPIO(),this.status="running",this.emit("start",this),this.save(),this}async timeTick(){try{if(this.isExpired())return this.stop();this._tick_count++,this.db_instance.running_time_seconds+=1,(this._tick_count>=SAVE_INTERVAL||this.db_instance.running_time_seconds>=this.db_instance.time_seconds)&&(this._tick_count=0,await this.save(),this.db_instance.running_time_seconds>=this.db_instance.time_seconds&&await this.stop())}catch(e){this.emit("error",e),await this.forceStop()}}startTick(){this.startTimeTick()}startTimeTick(){this.timer=new NanoTimer,this.timer.setInterval(()=>{this.timeTick()},"","1s")}isExpired(){if(this.db_instance){if(this.db_instance.expiration_date){var max_date=moment(this.db_instance.expiration_date);return moment().isAfter(max_date,"second")}return!1}throw new Error("Session Instance not loaded")}async pause(){try{await this.turnOffGPIO()}catch(e){}return"running"!==this.status?Promise.reject("Session is not running"):(this.status="paused",this.timer.clearInterval(),await this.save(),this.emit("pause",this),this)}async forcePause(){try{await this.turnOffGPIO()}catch(e){}return this.status="paused",this.timer&&this.timer.clearInterval(),await this.save(),this}async stop(){return"running"!==this.status?Promise.reject("Session is not running"):(this.timer&&this.timer.clearInterval(),await this.turnOffGPIO(),await this.save(),this.status=this.isExpired()?"expired":"stopped",this.emit("stop",this),this)}async forceStop(){try{this.timer.clearInterval()}catch(e){}try{await this.turnOffGPIO()}catch(e){}try{await this.save()}catch(e){}return this.status="force_stopped",this.emit("stop",this),this}async clearPort(){this.db_instance.charging_port_id=null,this.charging_port_id=null,this.charging_port=null,await this.save()}async turnOffGPIO(){var port=this.charging_port;await this.clearPort();try{if("production"!==process.env.NODE_ENV)return;await cmd(`python /etc/toggle-gpio.py ${port.pin} 0`)}catch(e){}}async turnOnGPIO(){var port=this.charging_port;try{if("production"!==process.env.NODE_ENV)return;await cmd(`python /etc/toggle-gpio.py ${port.pin} 1`)}catch(e){}}async save(){try{return await this.db_instance.save(),this}catch(e){this.emit("error",e),await this.forceStop()}}async mobileDeviceIds(){return[this.db_instance.mobile_device_id]}async mobileDevices(){var ids=await this.mobileDeviceIds();return dbi.models.MobileDevice.findAll({where:{id:ids}})}toJSON(){var{id,mobile_device_id,time_seconds,running_time_seconds,expire_minutes,expiration_date,created_at,updated_at}=this.db_instance,{charging_port_id}=this;let{status}=this;return this.isExpired()&&(status="expired"),{id:id,status:status,mobile_device_id:mobile_device_id,charging_port_id:charging_port_id,time_seconds:time_seconds,running_time_seconds:running_time_seconds,expire_minutes:expire_minutes,expiration_date:expiration_date,created_at:created_at,updated_at:updated_at}}}module.exports=Session;